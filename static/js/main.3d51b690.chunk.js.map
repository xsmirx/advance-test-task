{"version":3,"sources":["components/Methods/Methods.jsx","components/Form/Form.jsx","App.js","index.js"],"names":["StyledBtn","styled","Button","textTransform","StyledCode","Card","padding","Methods","state","useState","showGet","setShowGet","showConvert","setShowConvert","getFormValues","arr","filter","item","key","namesOfFields","Object","keys","result","i","length","j","push","Typography","variant","Box","sx","display","gap","margin","onClick","elevation","JSON","stringify","obj","numberOfFields","numberOfForms","convertArrayToObject","Form","type","value","setType","setValue","addItem","removeItem","enableRemoveBtn","position","justifyContent","width","flexWrap","FormControl","flex","InputLabel","id","Select","labelId","label","onChange","e","target","MenuItem","TextField","color","initialState","App","setState","items","map","index","array","newState","splice","itm","indx","Container","maxWidth","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3d51b690.chunk.js","sourcesContent":["import { Button, Card, Typography } from \"@mui/material\";\nimport { Box, styled } from \"@mui/system\";\nimport { useState } from \"react\";\n\nconst StyledBtn = styled(Button)({\n  textTransform: \"none\",\n});\nconst StyledCode = styled(Card)({\n  padding: \"1rem\",\n});\n\nconst Methods = ({ state }) => {\n  const [showGet, setShowGet] = useState(false);\n  const [showConvert, setShowConvert] = useState(false);\n\n  const handlerGetBtn = () => {\n    setShowGet(true);\n    setShowConvert(false);\n  };\n  const handlerConvertBtn = () => {\n    setShowConvert(true);\n    setShowGet(false);\n  };\n\n  const getFormValues = (state) => {\n    //check for empty field on form\n    let arr = state.filter((item) => {\n      for (let key in item) {\n        if (!item[key]) {\n          return false;\n        }\n      }\n      return true;\n    });\n\n    let namesOfFields = Object.keys(arr[0]);\n    let result = {};\n    for (let i = 0; i < namesOfFields.length; i++) {\n      result[namesOfFields[i]] = [];\n      for (let j = 0; j < arr.length; j++) {\n        result[namesOfFields[i]].push(arr[j][namesOfFields[i]]);\n      }\n    }\n\n    return result;\n  };\n\n  const convertArrayToObject = (obj) => {\n    let result = [];\n\n    let namesOfFields = Object.keys(obj);\n\n    let numberOfFields = namesOfFields.length;\n    let numberOfForms = obj[namesOfFields[0]].length;\n\n    for (let i = 0; i < numberOfForms; i++) {\n      result.push({});\n      for (let j = 0; j < numberOfFields; j++) {\n        result[i][namesOfFields[j]] = obj[namesOfFields[j]][i];\n      }\n    }\n\n    return result;\n  };\n\n  return (\n    <>\n      <Typography variant=\"body1\">\n        When click the button, will be displayed the result of work of the\n        methods\n      </Typography>\n\n      <Box sx={{ display: \"flex\", gap: \"1rem\", margin: \"1rem 0\" }}>\n        <StyledBtn variant=\"contained\" onClick={handlerGetBtn}>\n          getFormValues()\n        </StyledBtn>\n        <StyledBtn variant=\"contained\" onClick={handlerConvertBtn}>\n          convertArrayToObject()\n        </StyledBtn>\n      </Box>\n\n      {showGet && (\n        <StyledCode elevation=\"5\">\n          <pre>{JSON.stringify(getFormValues(state), null, 2)}</pre>\n        </StyledCode>\n      )}\n\n      {showConvert && (\n        <StyledCode elevation=\"5\">\n          <pre>\n            {JSON.stringify(\n              convertArrayToObject(getFormValues(state)),\n              null,\n              2\n            )}\n          </pre>\n        </StyledCode>\n      )}\n    </>\n  );\n};\n\nexport default Methods;\n","import {\n  Button,\n  FormControl,\n  InputLabel,\n  MenuItem,\n  Select,\n  TextField,\n} from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport AddCircleIcon from \"@mui/icons-material/AddCircle\";\nimport RemoveCircleIcon from \"@mui/icons-material/RemoveCircle\";\n\nconst Form = ({\n  type,\n  value,\n  setType,\n  setValue,\n  addItem,\n  removeItem,\n  enableRemoveBtn,\n}) => {\n  const handlerType = (e) => setType(e.target.value);\n  const handlerValue = (e) => setValue(e.target.value);\n  return (\n    <Box\n      sx={{\n        position: \"relative\",\n        display: \"flex\",\n        justifyContent: \"flex-start\",\n        gap: \"1rem\",\n        margin: \"1rem 0\",\n      }}\n    >\n      <Box\n        sx={{\n          width: \"80%\",\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          gap: \"1rem\",\n          flexWrap: \"wrap\",\n        }}\n      >\n        <FormControl sx={{ flex: \"1 1 100px\" }}>\n          <InputLabel id=\"type\">Type</InputLabel>\n          <Select\n            id=\"type\"\n            labelId=\"type\"\n            label=\"Type\"\n            variant=\"outlined\"\n            value={type}\n            onChange={handlerType}\n          >\n            <MenuItem value=\"email\">Email</MenuItem>\n            <MenuItem value=\"phone\">Phone</MenuItem>\n            <MenuItem value=\"link\">Link</MenuItem>\n          </Select>\n        </FormControl>\n        <FormControl sx={{ flex: \"1 1 250px\" }}>\n          <TextField\n            id=\"value\"\n            label=\"Value\"\n            variant=\"outlined\"\n            value={value}\n            onChange={handlerValue}\n          />\n        </FormControl>\n      </Box>\n\n      <Box sx={{ flex: \"1 0 144px\", display: \"flex\", gap: \"1rem\" }}>\n        {type && value && (\n          <Button variant=\"contained\" onClick={addItem}>\n            <AddCircleIcon />\n          </Button>\n        )}\n\n        {enableRemoveBtn && (\n          <Button variant=\"outlined\" color=\"error\" onClick={removeItem}>\n            <RemoveCircleIcon />\n          </Button>\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nexport default Form;\n","import { Container } from \"@mui/material\";\nimport { useState } from \"react\";\nimport Methods from \"./components/Methods/Methods\";\nimport Form from \"./components/Form/Form\";\n\nconst initialState = [\n  {\n    type: \"email\",\n    value: \"123@gmail.com\",\n  },\n  {\n    type: \"phone\",\n    value: \"+79650987365\",\n  },\n  {\n    type: \"\",\n    value: \"\",\n  },\n  {\n    type: \"link\",\n    value: \"advance-club.ru\",\n  },\n];\n\nconst App = () => {\n  const [state, setState] = useState(initialState);\n\n  const addItem = (index) => {\n    let newState = [...state];\n    newState.splice(index + 1, 0, { type: \"\", value: \"\" });\n    setState(newState);\n  };\n\n  const removeItem = (index) => {\n    setState([...state.filter((itm, indx) => (indx === index ? false : true))]);\n  };\n\n  const setType = (index, type) => {\n    let newState = [...state];\n    newState[index].type = type;\n    setState(newState);\n  };\n\n  const setValue = (index, value) => {\n    let newState = [...state];\n    newState[index].value = value;\n    setState(newState);\n  };\n\n  const items = state.map((item, index, array) => {\n    return (\n      <Form\n        key={index}\n        type={item.type}\n        value={item.value}\n        setType={(type) => setType(index, type)}\n        setValue={(value) => setValue(index, value)}\n        addItem={() => addItem(index)}\n        removeItem={() => removeItem(index)}\n        enableRemoveBtn={array.length <= 1 ? false : true}\n      />\n    );\n  });\n  return (\n    <Container maxWidth=\"md\">\n      {items}\n      <Methods state={state} />\n    </Container>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"normalize.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}