{"version":3,"sources":["components/Code/Code.jsx","components/Form/Form.jsx","App.js","index.js"],"names":["StyledBtn","styled","Button","textTransform","StyledCode","Card","padding","Code","obj","state","useState","showGet","setShowGet","showConvert","setShowConvert","getFormValues","arr","filter","item","type","value","map","Typography","variant","Box","sx","display","gap","margin","onClick","elevation","JSON","stringify","index","Form","setType","setValue","addItem","removeItem","enableRemoveBtn","position","justifyContent","width","flexWrap","FormControl","flex","InputLabel","id","Select","labelId","label","onChange","e","target","MenuItem","TextField","color","initialState","App","setState","items","array","newState","splice","itm","indx","length","Container","maxWidth","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.aaf94d6b.chunk.js","sourcesContent":["import { Button, Card, Typography } from \"@mui/material\";\nimport { Box, styled } from \"@mui/system\";\nimport { useState } from \"react\";\n\nconst StyledBtn = styled(Button)({\n  textTransform: \"none\",\n});\nconst StyledCode = styled(Card)({\n  padding: \"1rem\",\n});\n\nconst Code = ({ state }) => {\n  const [showGet, setShowGet] = useState(false);\n  const [showConvert, setShowConvert] = useState(false);\n\n  const handlerGetBtn = () => {\n    setShowGet(true);\n    setShowConvert(false);\n  };\n  const handlerConvertBtn = () => {\n    setShowConvert(true);\n    setShowGet(false);\n  };\n\n  const getFormValues = (state) => {\n    let arr = state.filter((item) => item.type && item.value);\n    return {\n      type: arr.map((item) => item.type),\n      value: arr.map((item) => item.value),\n    };\n  };\n\n  const convertArrayToObject = (obj) => {\n    return obj.type.map((item, index) => {\n      return {\n        type: item,\n        value: obj.value[index],\n      };\n    });\n  };\n\n  return (\n    <>\n      <Typography variant=\"body1\">\n        When click the button, will be displayed the result of work of the\n        methods\n      </Typography>\n\n      <Box sx={{ display: \"flex\", gap: \"1rem\", margin: \"1rem 0\" }}>\n        <StyledBtn variant=\"contained\" onClick={handlerGetBtn}>\n          getFormValues()\n        </StyledBtn>\n        <StyledBtn variant=\"contained\" onClick={handlerConvertBtn}>\n          convertArrayToObject()\n        </StyledBtn>\n      </Box>\n\n      {showGet && (\n        <StyledCode elevation=\"5\">\n          <pre>{JSON.stringify(getFormValues(state), null, 2)}</pre>\n        </StyledCode>\n      )}\n\n      {showConvert && (\n        <StyledCode elevation=\"5\">\n          <pre>\n            {JSON.stringify(\n              convertArrayToObject(getFormValues(state)),\n              null,\n              2\n            )}\n          </pre>\n        </StyledCode>\n      )}\n    </>\n  );\n};\n\nexport default Code;\n","import {\n  Button,\n  FormControl,\n  InputLabel,\n  MenuItem,\n  Select,\n  TextField,\n} from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport AddCircleIcon from \"@mui/icons-material/AddCircle\";\nimport RemoveCircleIcon from \"@mui/icons-material/RemoveCircle\";\n\nconst Form = ({\n  type,\n  value,\n  setType,\n  setValue,\n  addItem,\n  removeItem,\n  enableRemoveBtn,\n}) => {\n  const handlerType = (e) => setType(e.target.value);\n  const handlerValue = (e) => setValue(e.target.value);\n  return (\n    <Box\n      sx={{\n        position: \"relative\",\n        display: \"flex\",\n        justifyContent: \"flex-start\",\n        gap: \"1rem\",\n        margin: \"1rem 0\",\n      }}\n    >\n      <Box\n        sx={{\n          width: \"80%\",\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          gap: \"1rem\",\n          flexWrap: \"wrap\",\n        }}\n      >\n        <FormControl sx={{ flex: \"1 1 100px\" }}>\n          <InputLabel id=\"type\">Type</InputLabel>\n          <Select\n            id=\"type\"\n            labelId=\"type\"\n            label=\"Type\"\n            variant=\"outlined\"\n            value={type}\n            onChange={handlerType}\n          >\n            <MenuItem value=\"email\">Email</MenuItem>\n            <MenuItem value=\"phone\">Phone</MenuItem>\n            <MenuItem value=\"link\">Link</MenuItem>\n          </Select>\n        </FormControl>\n        <FormControl sx={{ flex: \"1 1 250px\" }}>\n          <TextField\n            id=\"value\"\n            label=\"Value\"\n            variant=\"outlined\"\n            value={value}\n            onChange={handlerValue}\n          />\n        </FormControl>\n      </Box>\n\n      <Box sx={{ flex: \"1 0 144px\", display: \"flex\", gap: \"1rem\" }}>\n        {type && value && (\n          <Button variant=\"contained\" onClick={addItem}>\n            <AddCircleIcon />\n          </Button>\n        )}\n\n        {enableRemoveBtn && (\n          <Button variant=\"outlined\" color=\"error\" onClick={removeItem}>\n            <RemoveCircleIcon />\n          </Button>\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nexport default Form;\n","import { Container } from \"@mui/material\";\nimport { useState } from \"react\";\nimport Code from \"./components/Code/Code\";\nimport Form from \"./components/Form/Form\";\n\nconst initialState = [\n  {\n    type: \"email\",\n    value: \"123@gmail.com\",\n  },\n  {\n    type: \"phone\",\n    value: \"+79650987365\",\n  },\n  {\n    type: \"\",\n    value: \"\",\n  },\n  {\n    type: \"link\",\n    value: \"advance-club.ru\",\n  },\n];\n\nconst App = () => {\n  const [state, setState] = useState(initialState);\n\n  const addItem = (index) => {\n    let newState = [...state];\n    newState.splice(index + 1, 0, { type: \"\", value: \"\" });\n    setState(newState);\n  };\n\n  const removeItem = (index) => {\n    setState([...state.filter((itm, indx) => (indx === index ? false : true))]);\n  };\n\n  const setType = (index, type) => {\n    let newState = [...state];\n    newState[index].type = type;\n    setState(newState);\n  };\n\n  const setValue = (index, value) => {\n    let newState = [...state];\n    newState[index].value = value;\n    setState(newState);\n  };\n\n  const items = state.map((item, index, array) => {\n    return (\n      <Form\n        key={index}\n        type={item.type}\n        value={item.value}\n        setType={(type) => setType(index, type)}\n        setValue={(value) => setValue(index, value)}\n        addItem={() => addItem(index)}\n        removeItem={() => removeItem(index)}\n        enableRemoveBtn={array.length <= 1 ? false : true}\n      />\n    );\n  });\n  return (\n    <Container maxWidth=\"md\">\n      {items}\n      <Code state={state} />\n    </Container>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"normalize.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}