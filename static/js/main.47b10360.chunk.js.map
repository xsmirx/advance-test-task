{"version":3,"sources":["components/Code/Code.jsx","components/Form/Form.jsx","App.js","index.js"],"names":["StyledBtn","styled","Button","textTransform","StyledCode","Card","padding","Code","state","useState","showGet","setShowGet","showConvert","setShowConvert","getFormValues","arr","filter","item","type","value","map","Typography","variant","Box","sx","display","gap","margin","onClick","elevation","JSON","stringify","obj","array","i","length","push","convertArrayToObject","Form","setType","setValue","addItem","removeItem","enableRemoveBtn","position","justifyContent","width","flexWrap","FormControl","flex","InputLabel","id","Select","labelId","label","onChange","e","target","MenuItem","TextField","color","initialState","App","setState","items","index","newState","splice","itm","indx","Container","maxWidth","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.47b10360.chunk.js","sourcesContent":["import { Button, Card, Typography } from \"@mui/material\";\nimport { Box, styled } from \"@mui/system\";\nimport { useState } from \"react\";\n\nconst StyledBtn = styled(Button)({\n  textTransform: \"none\",\n});\nconst StyledCode = styled(Card)({\n  padding: \"1rem\",\n});\n\nconst Code = ({ state }) => {\n  const [showGet, setShowGet] = useState(false);\n  const [showConvert, setShowConvert] = useState(false);\n\n  const handlerGetBtn = () => {\n    setShowGet(true);\n    setShowConvert(false);\n  };\n  const handlerConvertBtn = () => {\n    setShowConvert(true);\n    setShowGet(false);\n  };\n\n  const getFormValues = (state) => {\n    let arr = state.filter((item) => item.type && item.value);\n    return {\n      type: arr.map((item) => item.type),\n      value: arr.map((item) => item.value),\n    };\n  };\n\n  const convertArrayToObject = (obj) => {\n    let array = [];\n    for (let i = 0; i < obj.type.length; i++) {\n      array.push({\n        type: obj.type[i],\n        value: obj.value[i],\n      });\n    }\n    return array;\n  };\n\n  return (\n    <>\n      <Typography variant=\"body1\">\n        When click the button, will be displayed the result of work of the\n        methods\n      </Typography>\n\n      <Box sx={{ display: \"flex\", gap: \"1rem\", margin: \"1rem 0\" }}>\n        <StyledBtn variant=\"contained\" onClick={handlerGetBtn}>\n          getFormValues()\n        </StyledBtn>\n        <StyledBtn variant=\"contained\" onClick={handlerConvertBtn}>\n          convertArrayToObject()\n        </StyledBtn>\n      </Box>\n\n      {showGet && (\n        <StyledCode elevation=\"5\">\n          <pre>{JSON.stringify(getFormValues(state), null, 2)}</pre>\n        </StyledCode>\n      )}\n\n      {showConvert && (\n        <StyledCode elevation=\"5\">\n          <pre>\n            {JSON.stringify(\n              convertArrayToObject(getFormValues(state)),\n              null,\n              2\n            )}\n          </pre>\n        </StyledCode>\n      )}\n    </>\n  );\n};\n\nexport default Code;\n","import {\n  Button,\n  FormControl,\n  InputLabel,\n  MenuItem,\n  Select,\n  TextField,\n} from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport AddCircleIcon from \"@mui/icons-material/AddCircle\";\nimport RemoveCircleIcon from \"@mui/icons-material/RemoveCircle\";\n\nconst Form = ({\n  type,\n  value,\n  setType,\n  setValue,\n  addItem,\n  removeItem,\n  enableRemoveBtn,\n}) => {\n  const handlerType = (e) => setType(e.target.value);\n  const handlerValue = (e) => setValue(e.target.value);\n  return (\n    <Box\n      sx={{\n        position: \"relative\",\n        display: \"flex\",\n        justifyContent: \"flex-start\",\n        gap: \"1rem\",\n        margin: \"1rem 0\",\n      }}\n    >\n      <Box\n        sx={{\n          width: \"80%\",\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          gap: \"1rem\",\n          flexWrap: \"wrap\",\n        }}\n      >\n        <FormControl sx={{ flex: \"1 1 100px\" }}>\n          <InputLabel id=\"type\">Type</InputLabel>\n          <Select\n            id=\"type\"\n            labelId=\"type\"\n            label=\"Type\"\n            variant=\"outlined\"\n            value={type}\n            onChange={handlerType}\n          >\n            <MenuItem value=\"email\">Email</MenuItem>\n            <MenuItem value=\"phone\">Phone</MenuItem>\n            <MenuItem value=\"link\">Link</MenuItem>\n          </Select>\n        </FormControl>\n        <FormControl sx={{ flex: \"1 1 250px\" }}>\n          <TextField\n            id=\"value\"\n            label=\"Value\"\n            variant=\"outlined\"\n            value={value}\n            onChange={handlerValue}\n          />\n        </FormControl>\n      </Box>\n\n      <Box sx={{ flex: \"1 0 144px\", display: \"flex\", gap: \"1rem\" }}>\n        {type && value && (\n          <Button variant=\"contained\" onClick={addItem}>\n            <AddCircleIcon />\n          </Button>\n        )}\n\n        {enableRemoveBtn && (\n          <Button variant=\"outlined\" color=\"error\" onClick={removeItem}>\n            <RemoveCircleIcon />\n          </Button>\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nexport default Form;\n","import { Container } from \"@mui/material\";\nimport { useState } from \"react\";\nimport Code from \"./components/Code/Code\";\nimport Form from \"./components/Form/Form\";\n\nconst initialState = [\n  {\n    type: \"email\",\n    value: \"123@gmail.com\",\n  },\n  {\n    type: \"phone\",\n    value: \"+79650987365\",\n  },\n  {\n    type: \"\",\n    value: \"\",\n  },\n  {\n    type: \"link\",\n    value: \"advance-club.ru\",\n  },\n];\n\nconst App = () => {\n  const [state, setState] = useState(initialState);\n\n  const addItem = (index) => {\n    let newState = [...state];\n    newState.splice(index + 1, 0, { type: \"\", value: \"\" });\n    setState(newState);\n  };\n\n  const removeItem = (index) => {\n    setState([...state.filter((itm, indx) => (indx === index ? false : true))]);\n  };\n\n  const setType = (index, type) => {\n    let newState = [...state];\n    newState[index].type = type;\n    setState(newState);\n  };\n\n  const setValue = (index, value) => {\n    let newState = [...state];\n    newState[index].value = value;\n    setState(newState);\n  };\n\n  const items = state.map((item, index, array) => {\n    return (\n      <Form\n        key={index}\n        type={item.type}\n        value={item.value}\n        setType={(type) => setType(index, type)}\n        setValue={(value) => setValue(index, value)}\n        addItem={() => addItem(index)}\n        removeItem={() => removeItem(index)}\n        enableRemoveBtn={array.length <= 1 ? false : true}\n      />\n    );\n  });\n  return (\n    <Container maxWidth=\"md\">\n      {items}\n      <Code state={state} />\n    </Container>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"normalize.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}